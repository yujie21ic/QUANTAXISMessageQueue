// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: future.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "future.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace future {

namespace {

const ::google::protobuf::Descriptor* future_min_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  future_min_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_future_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_future_2eproto() {
  protobuf_AddDesc_future_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "future.proto");
  GOOGLE_CHECK(file != NULL);
  future_min_descriptor_ = file->message_type(0);
  static const int future_min_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, bartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, barendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, day_),
  };
  future_min_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      future_min_descriptor_,
      future_min::default_instance_,
      future_min_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, _has_bits_[0]),
      -1,
      -1,
      sizeof(future_min),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(future_min, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_future_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      future_min_descriptor_, &future_min::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_future_2eproto() {
  delete future_min::default_instance_;
  delete future_min_reflection_;
}

void protobuf_AddDesc_future_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_future_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014future.proto\022\006future\"\230\001\n\nfuture_min\022\014\n"
    "\004high\030\001 \002(\002\022\013\n\003low\030\002 \002(\002\022\014\n\004open\030\003 \002(\002\022\r"
    "\n\005close\030\004 \002(\002\022\016\n\006volume\030\005 \002(\002\022\017\n\007bartime"
    "\030\006 \002(\t\022\022\n\nbarendtime\030\007 \002(\t\022\020\n\010turnover\030\010"
    " \002(\002\022\013\n\003day\030\t \002(\t", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "future.proto", &protobuf_RegisterTypes);
  future_min::default_instance_ = new future_min();
  future_min::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_future_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_future_2eproto {
  StaticDescriptorInitializer_future_2eproto() {
    protobuf_AddDesc_future_2eproto();
  }
} static_descriptor_initializer_future_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int future_min::kHighFieldNumber;
const int future_min::kLowFieldNumber;
const int future_min::kOpenFieldNumber;
const int future_min::kCloseFieldNumber;
const int future_min::kVolumeFieldNumber;
const int future_min::kBartimeFieldNumber;
const int future_min::kBarendtimeFieldNumber;
const int future_min::kTurnoverFieldNumber;
const int future_min::kDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

future_min::future_min()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:future.future_min)
}

void future_min::InitAsDefaultInstance() {
}

future_min::future_min(const future_min& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:future.future_min)
}

void future_min::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  high_ = 0;
  low_ = 0;
  open_ = 0;
  close_ = 0;
  volume_ = 0;
  bartime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  barendtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  turnover_ = 0;
  day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

future_min::~future_min() {
  // @@protoc_insertion_point(destructor:future.future_min)
  SharedDtor();
}

void future_min::SharedDtor() {
  bartime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  barendtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void future_min::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* future_min::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return future_min_descriptor_;
}

const future_min& future_min::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_future_2eproto();
  return *default_instance_;
}

future_min* future_min::default_instance_ = NULL;

future_min* future_min::New(::google::protobuf::Arena* arena) const {
  future_min* n = new future_min;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void future_min::Clear() {
// @@protoc_insertion_point(message_clear_start:future.future_min)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(future_min, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<future_min*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(high_, close_);
    ZR_(volume_, turnover_);
    if (has_bartime()) {
      bartime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_barendtime()) {
      barendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_day()) {
    day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool future_min::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:future.future_min)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float high = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_low;
        break;
      }

      // required float low = 2;
      case 2: {
        if (tag == 21) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open;
        break;
      }

      // required float open = 3;
      case 3: {
        if (tag == 29) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_close;
        break;
      }

      // required float close = 4;
      case 4: {
        if (tag == 37) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_volume;
        break;
      }

      // required float volume = 5;
      case 5: {
        if (tag == 45) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bartime;
        break;
      }

      // required string bartime = 6;
      case 6: {
        if (tag == 50) {
         parse_bartime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bartime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bartime().data(), this->bartime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "future.future_min.bartime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_barendtime;
        break;
      }

      // required string barendtime = 7;
      case 7: {
        if (tag == 58) {
         parse_barendtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_barendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->barendtime().data(), this->barendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "future.future_min.barendtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_turnover;
        break;
      }

      // required float turnover = 8;
      case 8: {
        if (tag == 69) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_day;
        break;
      }

      // required string day = 9;
      case 9: {
        if (tag == 74) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "future.future_min.day");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:future.future_min)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:future.future_min)
  return false;
#undef DO_
}

void future_min::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:future.future_min)
  // required float high = 1;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->high(), output);
  }

  // required float low = 2;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low(), output);
  }

  // required float open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open(), output);
  }

  // required float close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->close(), output);
  }

  // required float volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->volume(), output);
  }

  // required string bartime = 6;
  if (has_bartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.bartime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bartime(), output);
  }

  // required string barendtime = 7;
  if (has_barendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barendtime().data(), this->barendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.barendtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->barendtime(), output);
  }

  // required float turnover = 8;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->turnover(), output);
  }

  // required string day = 9;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:future.future_min)
}

::google::protobuf::uint8* future_min::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:future.future_min)
  // required float high = 1;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->high(), target);
  }

  // required float low = 2;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->low(), target);
  }

  // required float open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open(), target);
  }

  // required float close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->close(), target);
  }

  // required float volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->volume(), target);
  }

  // required string bartime = 6;
  if (has_bartime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.bartime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bartime(), target);
  }

  // required string barendtime = 7;
  if (has_barendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->barendtime().data(), this->barendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.barendtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->barendtime(), target);
  }

  // required float turnover = 8;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->turnover(), target);
  }

  // required string day = 9;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "future.future_min.day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:future.future_min)
  return target;
}

int future_min::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:future.future_min)
  int total_size = 0;

  if (has_high()) {
    // required float high = 1;
    total_size += 1 + 4;
  }

  if (has_low()) {
    // required float low = 2;
    total_size += 1 + 4;
  }

  if (has_open()) {
    // required float open = 3;
    total_size += 1 + 4;
  }

  if (has_close()) {
    // required float close = 4;
    total_size += 1 + 4;
  }

  if (has_volume()) {
    // required float volume = 5;
    total_size += 1 + 4;
  }

  if (has_bartime()) {
    // required string bartime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bartime());
  }

  if (has_barendtime()) {
    // required string barendtime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->barendtime());
  }

  if (has_turnover()) {
    // required float turnover = 8;
    total_size += 1 + 4;
  }

  if (has_day()) {
    // required string day = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->day());
  }

  return total_size;
}
int future_min::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:future.future_min)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required float high = 1;
    total_size += 1 + 4;

    // required float low = 2;
    total_size += 1 + 4;

    // required float open = 3;
    total_size += 1 + 4;

    // required float close = 4;
    total_size += 1 + 4;

    // required float volume = 5;
    total_size += 1 + 4;

    // required string bartime = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bartime());

    // required string barendtime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->barendtime());

    // required float turnover = 8;
    total_size += 1 + 4;

    // required string day = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->day());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void future_min::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:future.future_min)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const future_min* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const future_min>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:future.future_min)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:future.future_min)
    MergeFrom(*source);
  }
}

void future_min::MergeFrom(const future_min& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:future.future_min)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_bartime()) {
      set_has_bartime();
      bartime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bartime_);
    }
    if (from.has_barendtime()) {
      set_has_barendtime();
      barendtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.barendtime_);
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_day()) {
      set_has_day();
      day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void future_min::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:future.future_min)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void future_min::CopyFrom(const future_min& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:future.future_min)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool future_min::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void future_min::Swap(future_min* other) {
  if (other == this) return;
  InternalSwap(other);
}
void future_min::InternalSwap(future_min* other) {
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(open_, other->open_);
  std::swap(close_, other->close_);
  std::swap(volume_, other->volume_);
  bartime_.Swap(&other->bartime_);
  barendtime_.Swap(&other->barendtime_);
  std::swap(turnover_, other->turnover_);
  day_.Swap(&other->day_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata future_min::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = future_min_descriptor_;
  metadata.reflection = future_min_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// future_min

// required float high = 1;
bool future_min::has_high() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void future_min::set_has_high() {
  _has_bits_[0] |= 0x00000001u;
}
void future_min::clear_has_high() {
  _has_bits_[0] &= ~0x00000001u;
}
void future_min::clear_high() {
  high_ = 0;
  clear_has_high();
}
 float future_min::high() const {
  // @@protoc_insertion_point(field_get:future.future_min.high)
  return high_;
}
 void future_min::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.high)
}

// required float low = 2;
bool future_min::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void future_min::set_has_low() {
  _has_bits_[0] |= 0x00000002u;
}
void future_min::clear_has_low() {
  _has_bits_[0] &= ~0x00000002u;
}
void future_min::clear_low() {
  low_ = 0;
  clear_has_low();
}
 float future_min::low() const {
  // @@protoc_insertion_point(field_get:future.future_min.low)
  return low_;
}
 void future_min::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.low)
}

// required float open = 3;
bool future_min::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void future_min::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
void future_min::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
void future_min::clear_open() {
  open_ = 0;
  clear_has_open();
}
 float future_min::open() const {
  // @@protoc_insertion_point(field_get:future.future_min.open)
  return open_;
}
 void future_min::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.open)
}

// required float close = 4;
bool future_min::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void future_min::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
void future_min::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
void future_min::clear_close() {
  close_ = 0;
  clear_has_close();
}
 float future_min::close() const {
  // @@protoc_insertion_point(field_get:future.future_min.close)
  return close_;
}
 void future_min::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.close)
}

// required float volume = 5;
bool future_min::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void future_min::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
void future_min::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
void future_min::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
 float future_min::volume() const {
  // @@protoc_insertion_point(field_get:future.future_min.volume)
  return volume_;
}
 void future_min::set_volume(float value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.volume)
}

// required string bartime = 6;
bool future_min::has_bartime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void future_min::set_has_bartime() {
  _has_bits_[0] |= 0x00000020u;
}
void future_min::clear_has_bartime() {
  _has_bits_[0] &= ~0x00000020u;
}
void future_min::clear_bartime() {
  bartime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bartime();
}
 const ::std::string& future_min::bartime() const {
  // @@protoc_insertion_point(field_get:future.future_min.bartime)
  return bartime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_bartime(const ::std::string& value) {
  set_has_bartime();
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:future.future_min.bartime)
}
 void future_min::set_bartime(const char* value) {
  set_has_bartime();
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:future.future_min.bartime)
}
 void future_min::set_bartime(const char* value, size_t size) {
  set_has_bartime();
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:future.future_min.bartime)
}
 ::std::string* future_min::mutable_bartime() {
  set_has_bartime();
  // @@protoc_insertion_point(field_mutable:future.future_min.bartime)
  return bartime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* future_min::release_bartime() {
  // @@protoc_insertion_point(field_release:future.future_min.bartime)
  clear_has_bartime();
  return bartime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_allocated_bartime(::std::string* bartime) {
  if (bartime != NULL) {
    set_has_bartime();
  } else {
    clear_has_bartime();
  }
  bartime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bartime);
  // @@protoc_insertion_point(field_set_allocated:future.future_min.bartime)
}

// required string barendtime = 7;
bool future_min::has_barendtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void future_min::set_has_barendtime() {
  _has_bits_[0] |= 0x00000040u;
}
void future_min::clear_has_barendtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void future_min::clear_barendtime() {
  barendtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_barendtime();
}
 const ::std::string& future_min::barendtime() const {
  // @@protoc_insertion_point(field_get:future.future_min.barendtime)
  return barendtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_barendtime(const ::std::string& value) {
  set_has_barendtime();
  barendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:future.future_min.barendtime)
}
 void future_min::set_barendtime(const char* value) {
  set_has_barendtime();
  barendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:future.future_min.barendtime)
}
 void future_min::set_barendtime(const char* value, size_t size) {
  set_has_barendtime();
  barendtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:future.future_min.barendtime)
}
 ::std::string* future_min::mutable_barendtime() {
  set_has_barendtime();
  // @@protoc_insertion_point(field_mutable:future.future_min.barendtime)
  return barendtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* future_min::release_barendtime() {
  // @@protoc_insertion_point(field_release:future.future_min.barendtime)
  clear_has_barendtime();
  return barendtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_allocated_barendtime(::std::string* barendtime) {
  if (barendtime != NULL) {
    set_has_barendtime();
  } else {
    clear_has_barendtime();
  }
  barendtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), barendtime);
  // @@protoc_insertion_point(field_set_allocated:future.future_min.barendtime)
}

// required float turnover = 8;
bool future_min::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void future_min::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
void future_min::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
void future_min::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
 float future_min::turnover() const {
  // @@protoc_insertion_point(field_get:future.future_min.turnover)
  return turnover_;
}
 void future_min::set_turnover(float value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:future.future_min.turnover)
}

// required string day = 9;
bool future_min::has_day() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void future_min::set_has_day() {
  _has_bits_[0] |= 0x00000100u;
}
void future_min::clear_has_day() {
  _has_bits_[0] &= ~0x00000100u;
}
void future_min::clear_day() {
  day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_day();
}
 const ::std::string& future_min::day() const {
  // @@protoc_insertion_point(field_get:future.future_min.day)
  return day_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_day(const ::std::string& value) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:future.future_min.day)
}
 void future_min::set_day(const char* value) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:future.future_min.day)
}
 void future_min::set_day(const char* value, size_t size) {
  set_has_day();
  day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:future.future_min.day)
}
 ::std::string* future_min::mutable_day() {
  set_has_day();
  // @@protoc_insertion_point(field_mutable:future.future_min.day)
  return day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* future_min::release_day() {
  // @@protoc_insertion_point(field_release:future.future_min.day)
  clear_has_day();
  return day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void future_min::set_allocated_day(::std::string* day) {
  if (day != NULL) {
    set_has_day();
  } else {
    clear_has_day();
  }
  day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), day);
  // @@protoc_insertion_point(field_set_allocated:future.future_min.day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace future

// @@protoc_insertion_point(global_scope)
