// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "l2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* market_price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  market_price_reflection_ = NULL;
const ::google::protobuf::Descriptor* market_price_market_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  market_price_market_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* market_price_market_holder_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_l2_2eproto() {
  protobuf_AddDesc_l2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "l2.proto");
  GOOGLE_CHECK(file != NULL);
  market_price_descriptor_ = file->message_type(0);
  static const int market_price_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, code_),
  };
  market_price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      market_price_descriptor_,
      market_price::default_instance_,
      market_price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(market_price));
  market_price_market_info_descriptor_ = market_price_descriptor_->nested_type(0);
  static const int market_price_market_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price_market_info, type_),
  };
  market_price_market_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      market_price_market_info_descriptor_,
      market_price_market_info::default_instance_,
      market_price_market_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price_market_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(market_price_market_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(market_price_market_info));
  market_price_market_holder_descriptor_ = market_price_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_l2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    market_price_descriptor_, &market_price::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    market_price_market_info_descriptor_, &market_price_market_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_l2_2eproto() {
  delete market_price::default_instance_;
  delete market_price_reflection_;
  delete market_price_market_info::default_instance_;
  delete market_price_market_info_reflection_;
}

void protobuf_AddDesc_l2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010l2.proto\"\327\001\n\014market_price\022\014\n\004high\030\001 \002("
    "\002\022\013\n\003low\030\002 \002(\002\022\014\n\004open\030\003 \002(\002\022\r\n\005close\030\004 "
    "\002(\002\022\016\n\006volume\030\005 \002(\002\022\022\n\ntime_stamp\030\006 \002(\002\022"
    "\014\n\004code\030\007 \001(\t\032<\n\013market_info\022-\n\004type\030\001 \002"
    "(\0162\033.market_price.market_holder:\002sh\"\037\n\rm"
    "arket_holder\022\006\n\002sh\020\000\022\006\n\002sz\020\001", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "l2.proto", &protobuf_RegisterTypes);
  market_price::default_instance_ = new market_price();
  market_price_market_info::default_instance_ = new market_price_market_info();
  market_price::default_instance_->InitAsDefaultInstance();
  market_price_market_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_l2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_l2_2eproto {
  StaticDescriptorInitializer_l2_2eproto() {
    protobuf_AddDesc_l2_2eproto();
  }
} static_descriptor_initializer_l2_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* market_price_market_holder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return market_price_market_holder_descriptor_;
}
bool market_price_market_holder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const market_price_market_holder market_price::sh;
const market_price_market_holder market_price::sz;
const market_price_market_holder market_price::market_holder_MIN;
const market_price_market_holder market_price::market_holder_MAX;
const int market_price::market_holder_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int market_price_market_info::kTypeFieldNumber;
#endif  // !_MSC_VER

market_price_market_info::market_price_market_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market_price.market_info)
}

void market_price_market_info::InitAsDefaultInstance() {
}

market_price_market_info::market_price_market_info(const market_price_market_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:market_price.market_info)
}

void market_price_market_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

market_price_market_info::~market_price_market_info() {
  // @@protoc_insertion_point(destructor:market_price.market_info)
  SharedDtor();
}

void market_price_market_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void market_price_market_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* market_price_market_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return market_price_market_info_descriptor_;
}

const market_price_market_info& market_price_market_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l2_2eproto();
  return *default_instance_;
}

market_price_market_info* market_price_market_info::default_instance_ = NULL;

market_price_market_info* market_price_market_info::New() const {
  return new market_price_market_info;
}

void market_price_market_info::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool market_price_market_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:market_price.market_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .market_price.market_holder type = 1 [default = sh];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::market_price_market_holder_IsValid(value)) {
            set_type(static_cast< ::market_price_market_holder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:market_price.market_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:market_price.market_info)
  return false;
#undef DO_
}

void market_price_market_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:market_price.market_info)
  // required .market_price.market_holder type = 1 [default = sh];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:market_price.market_info)
}

::google::protobuf::uint8* market_price_market_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_price.market_info)
  // required .market_price.market_holder type = 1 [default = sh];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_price.market_info)
  return target;
}

int market_price_market_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .market_price.market_holder type = 1 [default = sh];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void market_price_market_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const market_price_market_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const market_price_market_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void market_price_market_info::MergeFrom(const market_price_market_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void market_price_market_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void market_price_market_info::CopyFrom(const market_price_market_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool market_price_market_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void market_price_market_info::Swap(market_price_market_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata market_price_market_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = market_price_market_info_descriptor_;
  metadata.reflection = market_price_market_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int market_price::kHighFieldNumber;
const int market_price::kLowFieldNumber;
const int market_price::kOpenFieldNumber;
const int market_price::kCloseFieldNumber;
const int market_price::kVolumeFieldNumber;
const int market_price::kTimeStampFieldNumber;
const int market_price::kCodeFieldNumber;
#endif  // !_MSC_VER

market_price::market_price()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market_price)
}

void market_price::InitAsDefaultInstance() {
}

market_price::market_price(const market_price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:market_price)
}

void market_price::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  high_ = 0;
  low_ = 0;
  open_ = 0;
  close_ = 0;
  volume_ = 0;
  time_stamp_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

market_price::~market_price() {
  // @@protoc_insertion_point(destructor:market_price)
  SharedDtor();
}

void market_price::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void market_price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* market_price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return market_price_descriptor_;
}

const market_price& market_price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l2_2eproto();
  return *default_instance_;
}

market_price* market_price::default_instance_ = NULL;

market_price* market_price::New() const {
  return new market_price;
}

void market_price::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<market_price*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(high_, time_stamp_);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool market_price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:market_price)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float high = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_low;
        break;
      }

      // required float low = 2;
      case 2: {
        if (tag == 21) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open;
        break;
      }

      // required float open = 3;
      case 3: {
        if (tag == 29) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_close;
        break;
      }

      // required float close = 4;
      case 4: {
        if (tag == 37) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_volume;
        break;
      }

      // required float volume = 5;
      case 5: {
        if (tag == 45) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_time_stamp;
        break;
      }

      // required float time_stamp = 6;
      case 6: {
        if (tag == 53) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_code;
        break;
      }

      // optional string code = 7;
      case 7: {
        if (tag == 58) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:market_price)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:market_price)
  return false;
#undef DO_
}

void market_price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:market_price)
  // required float high = 1;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->high(), output);
  }

  // required float low = 2;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->low(), output);
  }

  // required float open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open(), output);
  }

  // required float close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->close(), output);
  }

  // required float volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->volume(), output);
  }

  // required float time_stamp = 6;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_stamp(), output);
  }

  // optional string code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:market_price)
}

::google::protobuf::uint8* market_price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:market_price)
  // required float high = 1;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->high(), target);
  }

  // required float low = 2;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->low(), target);
  }

  // required float open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open(), target);
  }

  // required float close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->close(), target);
  }

  // required float volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->volume(), target);
  }

  // required float time_stamp = 6;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_stamp(), target);
  }

  // optional string code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market_price)
  return target;
}

int market_price::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float high = 1;
    if (has_high()) {
      total_size += 1 + 4;
    }

    // required float low = 2;
    if (has_low()) {
      total_size += 1 + 4;
    }

    // required float open = 3;
    if (has_open()) {
      total_size += 1 + 4;
    }

    // required float close = 4;
    if (has_close()) {
      total_size += 1 + 4;
    }

    // required float volume = 5;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // required float time_stamp = 6;
    if (has_time_stamp()) {
      total_size += 1 + 4;
    }

    // optional string code = 7;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void market_price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const market_price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const market_price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void market_price::MergeFrom(const market_price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void market_price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void market_price::CopyFrom(const market_price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool market_price::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void market_price::Swap(market_price* other) {
  if (other != this) {
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(open_, other->open_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata market_price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = market_price_descriptor_;
  metadata.reflection = market_price_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
