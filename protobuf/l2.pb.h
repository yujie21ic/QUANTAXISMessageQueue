// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: l2.proto

#ifndef PROTOBUF_l2_2eproto__INCLUDED
#define PROTOBUF_l2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_l2_2eproto();
void protobuf_AssignDesc_l2_2eproto();
void protobuf_ShutdownFile_l2_2eproto();

class market_price;
class market_price_market_info;

enum market_price_market_holder {
  market_price_market_holder_sh = 0,
  market_price_market_holder_sz = 1
};
bool market_price_market_holder_IsValid(int value);
const market_price_market_holder market_price_market_holder_market_holder_MIN = market_price_market_holder_sh;
const market_price_market_holder market_price_market_holder_market_holder_MAX = market_price_market_holder_sz;
const int market_price_market_holder_market_holder_ARRAYSIZE = market_price_market_holder_market_holder_MAX + 1;

const ::google::protobuf::EnumDescriptor* market_price_market_holder_descriptor();
inline const ::std::string& market_price_market_holder_Name(market_price_market_holder value) {
  return ::google::protobuf::internal::NameOfEnum(
    market_price_market_holder_descriptor(), value);
}
inline bool market_price_market_holder_Parse(
    const ::std::string& name, market_price_market_holder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<market_price_market_holder>(
    market_price_market_holder_descriptor(), name, value);
}
// ===================================================================

class market_price_market_info : public ::google::protobuf::Message {
 public:
  market_price_market_info();
  virtual ~market_price_market_info();

  market_price_market_info(const market_price_market_info& from);

  inline market_price_market_info& operator=(const market_price_market_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const market_price_market_info& default_instance();

  void Swap(market_price_market_info* other);

  // implements Message ----------------------------------------------

  market_price_market_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const market_price_market_info& from);
  void MergeFrom(const market_price_market_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .market_price.market_holder type = 1 [default = sh];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::market_price_market_holder type() const;
  inline void set_type(::market_price_market_holder value);

  // @@protoc_insertion_point(class_scope:market_price.market_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_l2_2eproto();
  friend void protobuf_AssignDesc_l2_2eproto();
  friend void protobuf_ShutdownFile_l2_2eproto();

  void InitAsDefaultInstance();
  static market_price_market_info* default_instance_;
};
// -------------------------------------------------------------------

class market_price : public ::google::protobuf::Message {
 public:
  market_price();
  virtual ~market_price();

  market_price(const market_price& from);

  inline market_price& operator=(const market_price& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const market_price& default_instance();

  void Swap(market_price* other);

  // implements Message ----------------------------------------------

  market_price* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const market_price& from);
  void MergeFrom(const market_price& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef market_price_market_info market_info;

  typedef market_price_market_holder market_holder;
  static const market_holder sh = market_price_market_holder_sh;
  static const market_holder sz = market_price_market_holder_sz;
  static inline bool market_holder_IsValid(int value) {
    return market_price_market_holder_IsValid(value);
  }
  static const market_holder market_holder_MIN =
    market_price_market_holder_market_holder_MIN;
  static const market_holder market_holder_MAX =
    market_price_market_holder_market_holder_MAX;
  static const int market_holder_ARRAYSIZE =
    market_price_market_holder_market_holder_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  market_holder_descriptor() {
    return market_price_market_holder_descriptor();
  }
  static inline const ::std::string& market_holder_Name(market_holder value) {
    return market_price_market_holder_Name(value);
  }
  static inline bool market_holder_Parse(const ::std::string& name,
      market_holder* value) {
    return market_price_market_holder_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required float high = 1;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 1;
  inline float high() const;
  inline void set_high(float value);

  // required float low = 2;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 2;
  inline float low() const;
  inline void set_low(float value);

  // required float open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline float open() const;
  inline void set_open(float value);

  // required float close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline float close() const;
  inline void set_close(float value);

  // required float volume = 5;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 5;
  inline float volume() const;
  inline void set_volume(float value);

  // required float time_stamp = 6;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 6;
  inline float time_stamp() const;
  inline void set_time_stamp(float value);

  // optional string code = 7;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 7;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:market_price)
 private:
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float high_;
  float low_;
  float open_;
  float close_;
  float volume_;
  float time_stamp_;
  ::std::string* code_;
  friend void  protobuf_AddDesc_l2_2eproto();
  friend void protobuf_AssignDesc_l2_2eproto();
  friend void protobuf_ShutdownFile_l2_2eproto();

  void InitAsDefaultInstance();
  static market_price* default_instance_;
};
// ===================================================================


// ===================================================================

// market_price_market_info

// required .market_price.market_holder type = 1 [default = sh];
inline bool market_price_market_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void market_price_market_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void market_price_market_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void market_price_market_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::market_price_market_holder market_price_market_info::type() const {
  // @@protoc_insertion_point(field_get:market_price.market_info.type)
  return static_cast< ::market_price_market_holder >(type_);
}
inline void market_price_market_info::set_type(::market_price_market_holder value) {
  assert(::market_price_market_holder_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:market_price.market_info.type)
}

// -------------------------------------------------------------------

// market_price

// required float high = 1;
inline bool market_price::has_high() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void market_price::set_has_high() {
  _has_bits_[0] |= 0x00000001u;
}
inline void market_price::clear_has_high() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void market_price::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float market_price::high() const {
  // @@protoc_insertion_point(field_get:market_price.high)
  return high_;
}
inline void market_price::set_high(float value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:market_price.high)
}

// required float low = 2;
inline bool market_price::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void market_price::set_has_low() {
  _has_bits_[0] |= 0x00000002u;
}
inline void market_price::clear_has_low() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void market_price::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float market_price::low() const {
  // @@protoc_insertion_point(field_get:market_price.low)
  return low_;
}
inline void market_price::set_low(float value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:market_price.low)
}

// required float open = 3;
inline bool market_price::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void market_price::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void market_price::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void market_price::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline float market_price::open() const {
  // @@protoc_insertion_point(field_get:market_price.open)
  return open_;
}
inline void market_price::set_open(float value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:market_price.open)
}

// required float close = 4;
inline bool market_price::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void market_price::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void market_price::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void market_price::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float market_price::close() const {
  // @@protoc_insertion_point(field_get:market_price.close)
  return close_;
}
inline void market_price::set_close(float value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:market_price.close)
}

// required float volume = 5;
inline bool market_price::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void market_price::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void market_price::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void market_price::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline float market_price::volume() const {
  // @@protoc_insertion_point(field_get:market_price.volume)
  return volume_;
}
inline void market_price::set_volume(float value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:market_price.volume)
}

// required float time_stamp = 6;
inline bool market_price::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void market_price::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void market_price::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void market_price::clear_time_stamp() {
  time_stamp_ = 0;
  clear_has_time_stamp();
}
inline float market_price::time_stamp() const {
  // @@protoc_insertion_point(field_get:market_price.time_stamp)
  return time_stamp_;
}
inline void market_price::set_time_stamp(float value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:market_price.time_stamp)
}

// optional string code = 7;
inline bool market_price::has_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void market_price::set_has_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void market_price::clear_has_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void market_price::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& market_price::code() const {
  // @@protoc_insertion_point(field_get:market_price.code)
  return *code_;
}
inline void market_price::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:market_price.code)
}
inline void market_price::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:market_price.code)
}
inline void market_price::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:market_price.code)
}
inline ::std::string* market_price::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:market_price.code)
  return code_;
}
inline ::std::string* market_price::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void market_price::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:market_price.code)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::market_price_market_holder> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::market_price_market_holder>() {
  return ::market_price_market_holder_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_l2_2eproto__INCLUDED
